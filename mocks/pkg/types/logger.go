// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	types "github.com/aws-controllers-k8s/runtime/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, additionalValues
func (_m *Logger) Debug(msg string, additionalValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, additionalValues...)
	_m.Called(_ca...)
}

// Enter provides a mock function with given fields: name, additionalValues
func (_m *Logger) Enter(name string, additionalValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, additionalValues...)
	_m.Called(_ca...)
}

// Exit provides a mock function with given fields: name, err, additionalValues
func (_m *Logger) Exit(name string, err error, additionalValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, name, err)
	_ca = append(_ca, additionalValues...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, additionalValues
func (_m *Logger) Info(msg string, additionalValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, additionalValues...)
	_m.Called(_ca...)
}

// IsDebugEnabled provides a mock function with given fields:
func (_m *Logger) IsDebugEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Trace provides a mock function with given fields: name, additionalValues
func (_m *Logger) Trace(name string, additionalValues ...interface{}) types.TraceExiter {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, additionalValues...)
	ret := _m.Called(_ca...)

	var r0 types.TraceExiter
	if rf, ok := ret.Get(0).(func(string, ...interface{}) types.TraceExiter); ok {
		r0 = rf(name, additionalValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TraceExiter)
		}
	}

	return r0
}

// WithValues provides a mock function with given fields: _a0
func (_m *Logger) WithValues(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
