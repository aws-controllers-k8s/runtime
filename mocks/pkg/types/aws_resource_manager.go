// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	compare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws-controllers-k8s/runtime/pkg/types"
)

// AWSResourceManager is an autogenerated mock type for the AWSResourceManager type
type AWSResourceManager struct {
	mock.Mock
}

// ARNFromName provides a mock function with given fields: _a0
func (_m *AWSResourceManager) ARNFromName(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) Create(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) Delete(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LateInitialize provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) LateInitialize(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOne provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceManager) ReadOne(_a0 context.Context, _a1 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveReferences provides a mock function with given fields: _a0, _a1, _a2
func (_m *AWSResourceManager) ResolveReferences(_a0 context.Context, _a1 client.Reader, _a2 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, client.Reader, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, client.Reader, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *AWSResourceManager) Update(_a0 context.Context, _a1 types.AWSResource, _a2 types.AWSResource, _a3 *compare.Delta) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource, types.AWSResource, *compare.Delta) types.AWSResource); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource, types.AWSResource, *compare.Delta) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
