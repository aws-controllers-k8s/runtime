// Code generated by mockery v2.19.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	schema "k8s.io/apimachinery/pkg/runtime/schema"

	types "github.com/aws-controllers-k8s/runtime/pkg/types"

	v1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
)

// AWSResourceReconciler is an autogenerated mock type for the AWSResourceReconciler type
type AWSResourceReconciler struct {
	mock.Mock
}

// BindControllerManager provides a mock function with given fields: _a0
func (_m *AWSResourceReconciler) BindControllerManager(_a0 manager.Manager) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(manager.Manager) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupVersionKind provides a mock function with given fields:
func (_m *AWSResourceReconciler) GroupVersionKind() *schema.GroupVersionKind {
	ret := _m.Called()

	var r0 *schema.GroupVersionKind
	if rf, ok := ret.Get(0).(func() *schema.GroupVersionKind); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.GroupVersionKind)
		}
	}

	return r0
}

// HandleReconcileError provides a mock function with given fields: ctx, desired, latest, err
func (_m *AWSResourceReconciler) HandleReconcileError(ctx context.Context, desired types.AWSResource, latest types.AWSResource, err error) (reconcile.Result, error) {
	ret := _m.Called(ctx, desired, latest, err)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResource, types.AWSResource, error) reconcile.Result); ok {
		r0 = rf(ctx, desired, latest, err)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResource, types.AWSResource, error) error); ok {
		r1 = rf(ctx, desired, latest, err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reconcile provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceReconciler) Reconcile(_a0 context.Context, _a1 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 reconcile.Result
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretValueFromReference provides a mock function with given fields: _a0, _a1
func (_m *AWSResourceReconciler) SecretValueFromReference(_a0 context.Context, _a1 *v1alpha1.SecretKeyReference) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.SecretKeyReference) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.SecretKeyReference) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields: _a0, _a1, _a2
func (_m *AWSResourceReconciler) Sync(_a0 context.Context, _a1 types.AWSResourceManager, _a2 types.AWSResource) (types.AWSResource, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 types.AWSResource
	if rf, ok := ret.Get(0).(func(context.Context, types.AWSResourceManager, types.AWSResource) types.AWSResource); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AWSResourceManager, types.AWSResource) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAWSResourceReconciler interface {
	mock.TestingT
	Cleanup(func())
}

// NewAWSResourceReconciler creates a new instance of AWSResourceReconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAWSResourceReconciler(t mockConstructorTestingTNewAWSResourceReconciler) *AWSResourceReconciler {
	mock := &AWSResourceReconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
