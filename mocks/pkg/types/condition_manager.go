// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
)

// ConditionManager is an autogenerated mock type for the ConditionManager type
type ConditionManager struct {
	mock.Mock
}

// Conditions provides a mock function with no fields
func (_m *ConditionManager) Conditions() []*v1alpha1.Condition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conditions")
	}

	var r0 []*v1alpha1.Condition
	if rf, ok := ret.Get(0).(func() []*v1alpha1.Condition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Condition)
		}
	}

	return r0
}

// ReplaceConditions provides a mock function with given fields: _a0
func (_m *ConditionManager) ReplaceConditions(_a0 []*v1alpha1.Condition) {
	_m.Called(_a0)
}

// NewConditionManager creates a new instance of ConditionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConditionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConditionManager {
	mock := &ConditionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
