// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	runtime "k8s.io/apimachinery/pkg/runtime"

	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ObjectList is an autogenerated mock type for the ObjectList type
type ObjectList struct {
	mock.Mock
}

// DeepCopyObject provides a mock function with given fields:
func (_m *ObjectList) DeepCopyObject() runtime.Object {
	ret := _m.Called()

	var r0 runtime.Object
	if rf, ok := ret.Get(0).(func() runtime.Object); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}

	return r0
}

// GetContinue provides a mock function with given fields:
func (_m *ObjectList) GetContinue() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetObjectKind provides a mock function with given fields:
func (_m *ObjectList) GetObjectKind() schema.ObjectKind {
	ret := _m.Called()

	var r0 schema.ObjectKind
	if rf, ok := ret.Get(0).(func() schema.ObjectKind); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ObjectKind)
		}
	}

	return r0
}

// GetRemainingItemCount provides a mock function with given fields:
func (_m *ObjectList) GetRemainingItemCount() *int64 {
	ret := _m.Called()

	var r0 *int64
	if rf, ok := ret.Get(0).(func() *int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// GetResourceVersion provides a mock function with given fields:
func (_m *ObjectList) GetResourceVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSelfLink provides a mock function with given fields:
func (_m *ObjectList) GetSelfLink() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetContinue provides a mock function with given fields: c
func (_m *ObjectList) SetContinue(c string) {
	_m.Called(c)
}

// SetRemainingItemCount provides a mock function with given fields: c
func (_m *ObjectList) SetRemainingItemCount(c *int64) {
	_m.Called(c)
}

// SetResourceVersion provides a mock function with given fields: version
func (_m *ObjectList) SetResourceVersion(version string) {
	_m.Called(version)
}

// SetSelfLink provides a mock function with given fields: selfLink
func (_m *ObjectList) SetSelfLink(selfLink string) {
	_m.Called(selfLink)
}

type mockConstructorTestingTNewObjectList interface {
	mock.TestingT
	Cleanup(func())
}

// NewObjectList creates a new instance of ObjectList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewObjectList(t mockConstructorTestingTNewObjectList) *ObjectList {
	mock := &ObjectList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
